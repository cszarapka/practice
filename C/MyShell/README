# MyShell
# Operating Systems Internal - Assignment 1
# author: Sebastian Kim

----------------------------- USER MANUAL -----------------------------

<<SYNOPSIS>>
	myshell [batch file]


<<DESCRIPTION>>
	Myshell is a command language interpreter which can execute several internal commands as well as some external command using a default Linux shell. The command can be read from either standard input or a batch file.


<<INTERNAL COMMANDS>>
1. cd <directory>
	Change current directory to <directory>.
	If <directory> argument does not present, it will print out current work path.
	If <directory> does not exist, an error will be printed out, no action will be made.

2. clr
	Clear the screen and print the prompt at the first line of the screen.

3. dir <directory> 
	List the files and directories in <directory>
	If <directory> argument does not present, list current directory
	If <directory> does not exist, an error will be printed
	
4. environ
	Display all the environment variables
	The environment string contains information of system environment including shell path, current path, etc.

5. echo <comment>
	Display <comment> on the screen (repeat the comment) following by a new line
	Multiple spaces and tabs in <comment> will be reduced to a single space

6. help
	Display this user manual with scroll function.
	The user manual is saved in 'readme' file which located with the same directory to myshell.

7. pause 
	The shell just waits until the user press the 'Enter' key.
	If 'Enter' is pressed, it will be back to the shell prompt.

8. quit
	Exit from the shell


<<EXTERNAL COMMANDS>>
	If user entered a command which is not belongs to the internal command, it will be sent to the default Linux shell. In this case, the command will be executed in a child process.


<<ENVIRONMENT>>
	Environment variable contains information of system and applications. With using this variable, configuration can be changed easily in the applications. 
	A user can display environment all variables by using internal command 'environ'.
	
	Some common variables defined are:
		SHELL		contains the path to the current shell.
		PARENT		is defined in a child process, containing the path to the shell of parent process.
		PWD			contains the path to the current working directory.
		PATH		contains a colon separated list of paths which the system will look for an application


<<I/O REDIRECTION>>
	I/O redirection means either changing standard output from the screen to a file (output redirection) or standard input from the keyboard to a file (input redirection).

	There are three types of redirection symbols with meaning of:
		> file: write the output into the file (original file will be overwritten)
		>> file: append the output into the file
		< file: read content from the file and send it to the program

	e.g) 
		- dir > out.txt: Write the result of dir command into out.txt
		- dir >> out.txt: Append the result of dir command into out.txt
		- grep myshell < out.txt: Get string that contains 'myshell' from out.txt
		- grep myshell < out.txt > out2.txt: 

	* If a command prints something on the screen (eg. dir, environ, help, echo), it usually supports output redirection (>, >>).
	* Only few special command supports input redirection (<).
	* If the command does not support redirections, it will be simply ignored.


<<BATCHFILE EXECUTION>>
	A batch file can be used to execute a list of jobs sequentially. Each command should be divided by a new line, and only one file can be used at once. The shell will be automatically terminated at the end of the batch file.
	e.g)
		./myshell batchfile.txt

		
<<BACKGROUND EXECUTION>>
	If '&' character presents at the end of the commands, the command will be executed in a child process, and the prompt will be returned directly. In that way, a user can execute other commands while the other programs running.
	e.g)
		- sleep 10 &

		
<<STOP PROGRAM EXECUTION>>
	User can stop the program by sending a signal (ctrl+c), the process will be killed directly if the signal received. However, the shell itself will not be affected by this signal.
	
	